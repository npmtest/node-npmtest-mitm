{"/home/travis/build/npmtest/node-npmtest-mitm/test.js":"/* istanbul instrument in package npmtest_mitm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mitm/lib.npmtest_mitm.js":"/* istanbul instrument in package npmtest_mitm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mitm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mitm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mitm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mitm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mitm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mitm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mitm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mitm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mitm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mitm.__dirname + '/lib.npmtest_mitm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mitm/node_modules/mitm/index.js":"var _ = require(\"underscore\")\nvar Net = require(\"net\")\nvar Tls = require(\"tls\")\nvar Http = require(\"http\")\nvar Https = require(\"https\")\nvar ClientRequest = Http.ClientRequest\nvar Socket = require(\"./lib/socket\")\nvar TlsSocket = require(\"./lib/tls_socket\")\nvar EventEmitter = require(\"events\").EventEmitter\nvar InternalSocket = require(\"./lib/internal_socket\")\nvar Stubs = require(\"./lib/stubs\")\nvar slice = Function.call.bind(Array.prototype.slice)\nvar normalizeConnectArgs = Net._normalizeConnectArgs || Net._normalizeArgs\nvar createRequestAndResponse = Http._connectionListener\nmodule.exports = Mitm\n\nfunction Mitm() {\n  if (!(this instanceof Mitm))\n    return Mitm.apply(Object.create(Mitm.prototype), arguments).enable()\n\n  this.stubs = new Stubs\n  this.on(\"request\", addCrossReferences)\n\n  return this\n}\n\nMitm.prototype.on = EventEmitter.prototype.on\nMitm.prototype.once = EventEmitter.prototype.once\nMitm.prototype.off = EventEmitter.prototype.removeListener\nMitm.prototype.addListener = EventEmitter.prototype.addListener\nMitm.prototype.removeListener = EventEmitter.prototype.removeListener\nMitm.prototype.emit = EventEmitter.prototype.emit\n\nvar NODE_0_10 = !!process.version.match(/^v0\\.10\\./)\n\nMitm.prototype.enable = function() {\n  // Connect is called synchronously.\n  var netConnect = this.tcpConnect.bind(this, Net.connect)\n  var tlsConnect = this.tlsConnect.bind(this, Tls.connect)\n\n  this.stubs.stub(Net, \"connect\", netConnect)\n  this.stubs.stub(Net, \"createConnection\", netConnect)\n  this.stubs.stub(Http.Agent.prototype, \"createConnection\", netConnect)\n  this.stubs.stub(Tls, \"connect\", tlsConnect)\n\n  if (NODE_0_10) {\n    // Node v0.10 sets createConnection on the object in the constructor.\n    this.stubs.stub(Http.globalAgent, \"createConnection\", netConnect)\n\n    // This will create a lot of sockets in tests, but that's the current price\n    // to pay until I find a better way to force a new socket for each\n    // connection.\n    this.stubs.stub(Http.globalAgent, \"maxSockets\", Infinity)\n    this.stubs.stub(Https.globalAgent, \"maxSockets\", Infinity)\n  }\n\n  // ClientRequest.prototype.onSocket is called synchronously from\n  // ClientRequest's constructor and is a convenient place to hook into new\n  // ClientRequests.\n  this.stubs.stub(ClientRequest.prototype, \"onSocket\", _.compose(\n    ClientRequest.prototype.onSocket,\n    this.request.bind(this)\n  ))\n\n  return this\n}\n\nMitm.prototype.disable = function() {\n  return this.stubs.restore(), this\n}\n\nMitm.prototype.connect = function connect(orig, Socket, opts, done) {\n  var sockets = InternalSocket.pair()\n  var client = new Socket(_.defaults({handle: sockets[0]}, opts))\n\n  this.emit(\"connect\", client, opts)\n  if (client.bypassed) return orig.call(this, opts, done)\n\n  var server = client.server = new Socket({handle: sockets[1]})\n  this.emit(\"connection\", server, opts)\n\n  // Ensure connect is emitted in next ticks, otherwise it would be impossible\n  // to listen to it after calling Net.connect or listening to it after the\n  // ClientRequest emits \"socket\".\n  setTimeout(client.emit.bind(client, \"connect\"))\n  setTimeout(server.emit.bind(server, \"connect\"))\n\n  return client\n}\n\nMitm.prototype.tcpConnect = function(orig, opts, done) {\n  var args = normalizeConnectArgs(slice(arguments, 1))\n  opts = args[0]; done = args[1]\n\n  // The callback is originally bound to the connect event in\n  // Socket.prototype.connect.\n  var client = this.connect(orig, Socket, opts, done)\n  if (client.server == null) return client\n  if (done) client.once(\"connect\", done)\n\n  return client\n}\n\nMitm.prototype.tlsConnect = function(orig, opts, done) {\n  var args = normalizeConnectArgs(slice(arguments, 1))\n  opts = args[0]; done = args[1]\n\n  var client = this.connect(orig, TlsSocket, opts, done)\n  if (client.server == null) return client\n  if (done) client.once(\"secureConnect\", done)\n\n  setTimeout(client.emit.bind(client, \"secureConnect\"))\n\n  return client\n}\n\nMitm.prototype.request = function request(socket) {\n  if (!socket.server) return socket\n\n  // Node >= v0.10.24 < v0.11 will crash with: «Assertion failed:\n  // (!current_buffer), function Execute, file ../src/node_http_parser.cc, line\n  // 387.» if ServerResponse.prototype.write is called from within the\n  // \"request\" event handler. Call it in the next tick to work around that.\n  var self = this\n  if (NODE_0_10) {\n    self = Object.create(this)\n    self.emit = _.compose(process.nextTick, Function.bind.bind(this.emit, this))\n  }\n\n  createRequestAndResponse.call(self, socket.server)\n  return socket\n}\n\nfunction addCrossReferences(req, res) { req.res = res; res.req = req }\n","/home/travis/build/npmtest/node-npmtest-mitm/node_modules/mitm/lib/socket.js":"var Net = require(\"net\")\nmodule.exports = Socket\n\nfunction Socket() { Net.Socket.apply(this, arguments) }\n\nSocket.prototype = Object.create(Net.Socket.prototype, {\n  constructor: {value: Socket, configurable: true, writeable: true}\n})\n\nSocket.prototype.bypass = function() {\n  this.bypassed = true\n}\n","/home/travis/build/npmtest/node-npmtest-mitm/node_modules/mitm/lib/tls_socket.js":"var Net = require(\"net\")\nvar Tls = require(\"tls\")\nvar Socket = require(\"./socket\")\nmodule.exports = TlsSocket\n\nfunction TlsSocket() { Socket.apply(this, arguments) }\n\n// Node v0.10 has no TLSSocket and uses a private ClearTextStream instance.\nTlsSocket.prototype = Object.create((Tls.TLSSocket || Net.Socket).prototype, {\n  constructor: {value: TlsSocket, configurable: true, writeable: true}\n})\n\nObject.keys(Socket.prototype).map(function(key) {\n  TlsSocket.prototype[key] = Socket.prototype[key]\n})\n\nTlsSocket.prototype.encrypted = true\nTlsSocket.prototype.authorized = true\n\n// Iojs v3 HTTPS/SSL implementation depends on a session.\n// Not sure whether returning null breaks anything.\n// https://github.com/nodejs/node/blob/291b310e219023c4d93b216b1081ef47386f8750/lib/_tls_wrap.js#L607\nTlsSocket.prototype.getSession = function() { return null }\n","/home/travis/build/npmtest/node-npmtest-mitm/node_modules/mitm/lib/internal_socket.js":"var DuplexStream = require(\"stream\").Duplex\nmodule.exports = InternalSocket\n\nvar NODE_0_10 = !!process.version.match(/^v0\\.10\\./)\nif (!NODE_0_10) var Uv = process.binding(\"uv\")\n\n/**\n * Sockets write to InternalSocket via write*String functions. The\n * WritableStream.prototype.write function is just used internally by\n * InternalSocket to queue data before pushing it to the other end via\n * ReadableStream.prototype.push. The receiver will then forward it to its\n * owner Socket via the onread property.\n *\n * InternalSocket is created for both the client side and the server side.\n */\nfunction InternalSocket(remote) {\n  DuplexStream.call(this)\n  if (remote) this.remote = remote\n\n  // End is for ReadableStream.prototype.push(null).\n  // Finish is for WritableStream.prototype.end.\n  this.on(\"data\", readData.bind(this))\n  this.on(\"end\", readEof.bind(this))\n  this.on(\"finish\", this._write.bind(this, null, null, noop))\n\n  return this.pause(), this\n}\n\nInternalSocket.prototype = Object.create(DuplexStream.prototype, {\n  constructor: {value: InternalSocket, configurable: true, writeable: true}\n})\n\nInternalSocket.pair = function() {\n  var a = Object.create(InternalSocket.prototype)\n  var b = Object.create(InternalSocket.prototype)\n  return [InternalSocket.call(a, b), InternalSocket.call(b, a)]\n}\n\nfunction readData(data) {\n  if (NODE_0_10) this.onread(data, 0, data.length)\n  else this.onread(data.length, data)\n}\n\nfunction readEof() {\n  if (!this.onread) return\n  if (NODE_0_10) process._errno = \"EOF\", this.onread(null, 0, 0)\n  else this.onread(Uv.UV_EOF)\n}\n\n// ReadStart may be called multiple times.\n//\n// Node v0.11's ReadableStream.prototype.resume and ReadableStream.prototype.pause return\n// self. InternalSocket's API states that they should return error codes\n// instead.\n//\n// Node v0.11.13 called ReadableStream.prototype.read(0) synchronously, but\n// v0.11.14 does it in the next tick. For easier sync use, call it here.\nInternalSocket.prototype.readStart = function() { this.resume(); this.read(0) }\nInternalSocket.prototype.readStop = function() { this.pause() }\nInternalSocket.prototype.close = InternalSocket.prototype.end\n\nInternalSocket.prototype._read = noop\nInternalSocket.prototype.ref = noop\nInternalSocket.prototype.unref = noop\n\nInternalSocket.prototype._write = function(data, encoding, done) {\n  var remote = this.remote\n  process.nextTick(function() { remote.push(data, encoding); done() })\n}\n\n// NOTE: Node v0.10 expects InternalSocket to return write request objects with\n// a \"oncomplete\" and \"cb\" property. Node v0.11 expects it return an error\n// instead.\n\n// InternalSocket.prototype.writeBinaryString was introduced in Node v0.11.14.\nInternalSocket.prototype.writeBinaryString = function(req, data) {\n  this.write(data, \"binary\")\n}\n\nInternalSocket.prototype.writeLatin1String = function(req, data) {\n  this.write(data, \"latin1\")\n}\n\nInternalSocket.prototype.writeBuffer = function(req, data) {\n  this.write(NODE_0_10 ? req : data)\n  if (NODE_0_10) return {}\n}\n\nInternalSocket.prototype.writeUtf8String = function(req, data) {\n  this.write(NODE_0_10 ? req : data, \"utf8\")\n  if (NODE_0_10) return {}\n}\n\nInternalSocket.prototype.writeAsciiString = function(req, data) {\n  this.write(NODE_0_10 ? req : data, \"ascii\")\n  if (NODE_0_10) return {}\n}\n\nInternalSocket.prototype.writeUcs2String = function(req, data) {\n  this.write(NODE_0_10 ? req : data, \"ucs2\")\n  if (NODE_0_10) return {}\n}\n\n// Node v0.10 will use writeQueueSize to see if it should set write request's\n// \"cb\" property or write more immediately.\nif (NODE_0_10) InternalSocket.prototype.writeQueueSize = 0\n\nfunction noop() {}\n","/home/travis/build/npmtest/node-npmtest-mitm/node_modules/mitm/lib/stubs.js":"module.exports = Stubs\n\nfunction Stubs() {}\n\nStubs.prototype = Object.create(Array.prototype)\n\nStubs.prototype.stub = function(obj, prop, value) {\n  this.push([obj, prop, obj[prop]])\n  obj[prop] = value\n}\n\nStubs.prototype.restore = function() {\n  var stub\n  while (stub = this.pop()) stub[0][stub[1]] = stub[2]\n}\n"}